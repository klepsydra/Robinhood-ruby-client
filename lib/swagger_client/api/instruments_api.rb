=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'uri'

module SwaggerClient
  class InstrumentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getAll
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfInstrumentData]
    def get_all_using_get1(opts = {})
      data, _status_code, _headers = get_all_using_get1_with_http_info(opts)
      data
    end

    # getAll
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfInstrumentData, Fixnum, Hash)>] MultipleOfInstrumentData data, response status code and response headers
    def get_all_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstrumentsApi.get_all_using_get1 ...'
      end
      # resource path
      local_var_path = '/instruments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfInstrumentData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstrumentsApi#get_all_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getSplits
    # @param instrument_id instrument_id
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfInstrumentSplit]
    def get_splits_using_get(instrument_id, opts = {})
      data, _status_code, _headers = get_splits_using_get_with_http_info(instrument_id, opts)
      data
    end

    # getSplits
    # @param instrument_id instrument_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfInstrumentSplit, Fixnum, Hash)>] MultipleOfInstrumentSplit data, response status code and response headers
    def get_splits_using_get_with_http_info(instrument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstrumentsApi.get_splits_using_get ...'
      end
      # verify the required parameter 'instrument_id' is set
      if @api_client.config.client_side_validation && instrument_id.nil?
        fail ArgumentError, "Missing the required parameter 'instrument_id' when calling InstrumentsApi.get_splits_using_get"
      end
      # resource path
      local_var_path = '/instruments/{instrument_id}/splits/'.sub('{' + 'instrument_id' + '}', instrument_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfInstrumentSplit')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstrumentsApi#get_splits_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get
    # @param instrument_id instrument_id
    # @param [Hash] opts the optional parameters
    # @return [InstrumentData]
    def get_using_get(instrument_id, opts = {})
      data, _status_code, _headers = get_using_get_with_http_info(instrument_id, opts)
      data
    end

    # get
    # @param instrument_id instrument_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstrumentData, Fixnum, Hash)>] InstrumentData data, response status code and response headers
    def get_using_get_with_http_info(instrument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstrumentsApi.get_using_get ...'
      end
      # verify the required parameter 'instrument_id' is set
      if @api_client.config.client_side_validation && instrument_id.nil?
        fail ArgumentError, "Missing the required parameter 'instrument_id' when calling InstrumentsApi.get_using_get"
      end
      # resource path
      local_var_path = '/instruments/{instrument_id}/'.sub('{' + 'instrument_id' + '}', instrument_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InstrumentData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstrumentsApi#get_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query query
    # @return [MultipleOfInstrumentData]
    def query_using_get1(opts = {})
      data, _status_code, _headers = query_using_get1_with_http_info(opts)
      data
    end

    # query
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query query
    # @return [Array<(MultipleOfInstrumentData, Fixnum, Hash)>] MultipleOfInstrumentData data, response status code and response headers
    def query_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstrumentsApi.query_using_get1 ...'
      end
      # resource path
      local_var_path = '/instruments/'

      # query parameters
      query_params = {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfInstrumentData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstrumentsApi#query_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
