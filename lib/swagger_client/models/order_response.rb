=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class OrderResponse
    attr_accessor :account

    attr_accessor :average_price

    attr_accessor :cancel

    attr_accessor :client_id

    attr_accessor :created_at

    attr_accessor :cumulative_quantity

    attr_accessor :executions

    attr_accessor :extended_hours

    attr_accessor :fees

    attr_accessor :id

    attr_accessor :instrument

    attr_accessor :last_transaction_at

    attr_accessor :override_day_trade_checks

    attr_accessor :override_dtbp_checks

    attr_accessor :position

    attr_accessor :price

    attr_accessor :quantity

    attr_accessor :reject_reason

    attr_accessor :side

    attr_accessor :state

    attr_accessor :stop_price

    attr_accessor :symbol

    attr_accessor :time_in_force

    attr_accessor :trigger

    attr_accessor :type

    attr_accessor :updated_at

    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account' => :'account',
        :'average_price' => :'average_price',
        :'cancel' => :'cancel',
        :'client_id' => :'client_id',
        :'created_at' => :'created_at',
        :'cumulative_quantity' => :'cumulative_quantity',
        :'executions' => :'executions',
        :'extended_hours' => :'extended_hours',
        :'fees' => :'fees',
        :'id' => :'id',
        :'instrument' => :'instrument',
        :'last_transaction_at' => :'last_transaction_at',
        :'override_day_trade_checks' => :'override_day_trade_checks',
        :'override_dtbp_checks' => :'override_dtbp_checks',
        :'position' => :'position',
        :'price' => :'price',
        :'quantity' => :'quantity',
        :'reject_reason' => :'reject_reason',
        :'side' => :'side',
        :'state' => :'state',
        :'stop_price' => :'stop_price',
        :'symbol' => :'symbol',
        :'time_in_force' => :'time_in_force',
        :'trigger' => :'trigger',
        :'type' => :'type',
        :'updated_at' => :'updated_at',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account' => :'String',
        :'average_price' => :'Float',
        :'cancel' => :'String',
        :'client_id' => :'String',
        :'created_at' => :'DateTime',
        :'cumulative_quantity' => :'Float',
        :'executions' => :'Array<Execution>',
        :'extended_hours' => :'BOOLEAN',
        :'fees' => :'Float',
        :'id' => :'String',
        :'instrument' => :'String',
        :'last_transaction_at' => :'DateTime',
        :'override_day_trade_checks' => :'BOOLEAN',
        :'override_dtbp_checks' => :'BOOLEAN',
        :'position' => :'String',
        :'price' => :'Float',
        :'quantity' => :'Integer',
        :'reject_reason' => :'String',
        :'side' => :'String',
        :'state' => :'String',
        :'stop_price' => :'Float',
        :'symbol' => :'String',
        :'time_in_force' => :'String',
        :'trigger' => :'String',
        :'type' => :'String',
        :'updated_at' => :'DateTime',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.has_key?(:'average_price')
        self.average_price = attributes[:'average_price']
      end

      if attributes.has_key?(:'cancel')
        self.cancel = attributes[:'cancel']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'cumulative_quantity')
        self.cumulative_quantity = attributes[:'cumulative_quantity']
      end

      if attributes.has_key?(:'executions')
        if (value = attributes[:'executions']).is_a?(Array)
          self.executions = value
        end
      end

      if attributes.has_key?(:'extended_hours')
        self.extended_hours = attributes[:'extended_hours']
      end

      if attributes.has_key?(:'fees')
        self.fees = attributes[:'fees']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'instrument')
        self.instrument = attributes[:'instrument']
      end

      if attributes.has_key?(:'last_transaction_at')
        self.last_transaction_at = attributes[:'last_transaction_at']
      end

      if attributes.has_key?(:'override_day_trade_checks')
        self.override_day_trade_checks = attributes[:'override_day_trade_checks']
      end

      if attributes.has_key?(:'override_dtbp_checks')
        self.override_dtbp_checks = attributes[:'override_dtbp_checks']
      end

      if attributes.has_key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'reject_reason')
        self.reject_reason = attributes[:'reject_reason']
      end

      if attributes.has_key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'stop_price')
        self.stop_price = attributes[:'stop_price']
      end

      if attributes.has_key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.has_key?(:'time_in_force')
        self.time_in_force = attributes[:'time_in_force']
      end

      if attributes.has_key?(:'trigger')
        self.trigger = attributes[:'trigger']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account == o.account &&
          average_price == o.average_price &&
          cancel == o.cancel &&
          client_id == o.client_id &&
          created_at == o.created_at &&
          cumulative_quantity == o.cumulative_quantity &&
          executions == o.executions &&
          extended_hours == o.extended_hours &&
          fees == o.fees &&
          id == o.id &&
          instrument == o.instrument &&
          last_transaction_at == o.last_transaction_at &&
          override_day_trade_checks == o.override_day_trade_checks &&
          override_dtbp_checks == o.override_dtbp_checks &&
          position == o.position &&
          price == o.price &&
          quantity == o.quantity &&
          reject_reason == o.reject_reason &&
          side == o.side &&
          state == o.state &&
          stop_price == o.stop_price &&
          symbol == o.symbol &&
          time_in_force == o.time_in_force &&
          trigger == o.trigger &&
          type == o.type &&
          updated_at == o.updated_at &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account, average_price, cancel, client_id, created_at, cumulative_quantity, executions, extended_hours, fees, id, instrument, last_transaction_at, override_day_trade_checks, override_dtbp_checks, position, price, quantity, reject_reason, side, state, stop_price, symbol, time_in_force, trigger, type, updated_at, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
