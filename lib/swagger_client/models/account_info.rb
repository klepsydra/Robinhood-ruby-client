=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class AccountInfo
    attr_accessor :account_number

    attr_accessor :buying_power

    attr_accessor :cash

    attr_accessor :cash_available_for_withdrawal

    attr_accessor :cash_balances

    attr_accessor :cash_held_for_orders

    attr_accessor :created_at

    attr_accessor :deactivated

    attr_accessor :deposit_halted

    attr_accessor :margin_balances

    attr_accessor :max_ach_early_access_amount

    attr_accessor :only_position_closing_trades

    attr_accessor :portfolio

    attr_accessor :positions

    attr_accessor :sma

    attr_accessor :sma_held_for_orders

    attr_accessor :sweep_enabled

    attr_accessor :type

    attr_accessor :uncleared_deposits

    attr_accessor :unsettled_funds

    attr_accessor :updated_at

    attr_accessor :url

    attr_accessor :user

    attr_accessor :withdrawal_halted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number' => :'account_number',
        :'buying_power' => :'buying_power',
        :'cash' => :'cash',
        :'cash_available_for_withdrawal' => :'cash_available_for_withdrawal',
        :'cash_balances' => :'cash_balances',
        :'cash_held_for_orders' => :'cash_held_for_orders',
        :'created_at' => :'created_at',
        :'deactivated' => :'deactivated',
        :'deposit_halted' => :'deposit_halted',
        :'margin_balances' => :'margin_balances',
        :'max_ach_early_access_amount' => :'max_ach_early_access_amount',
        :'only_position_closing_trades' => :'only_position_closing_trades',
        :'portfolio' => :'portfolio',
        :'positions' => :'positions',
        :'sma' => :'sma',
        :'sma_held_for_orders' => :'sma_held_for_orders',
        :'sweep_enabled' => :'sweep_enabled',
        :'type' => :'type',
        :'uncleared_deposits' => :'uncleared_deposits',
        :'unsettled_funds' => :'unsettled_funds',
        :'updated_at' => :'updated_at',
        :'url' => :'url',
        :'user' => :'user',
        :'withdrawal_halted' => :'withdrawal_halted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_number' => :'String',
        :'buying_power' => :'Float',
        :'cash' => :'Float',
        :'cash_available_for_withdrawal' => :'Float',
        :'cash_balances' => :'CashBalances',
        :'cash_held_for_orders' => :'Float',
        :'created_at' => :'DateTime',
        :'deactivated' => :'BOOLEAN',
        :'deposit_halted' => :'BOOLEAN',
        :'margin_balances' => :'MarginBalances',
        :'max_ach_early_access_amount' => :'Float',
        :'only_position_closing_trades' => :'BOOLEAN',
        :'portfolio' => :'String',
        :'positions' => :'String',
        :'sma' => :'Float',
        :'sma_held_for_orders' => :'Float',
        :'sweep_enabled' => :'BOOLEAN',
        :'type' => :'String',
        :'uncleared_deposits' => :'Float',
        :'unsettled_funds' => :'Float',
        :'updated_at' => :'DateTime',
        :'url' => :'String',
        :'user' => :'String',
        :'withdrawal_halted' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.has_key?(:'buying_power')
        self.buying_power = attributes[:'buying_power']
      end

      if attributes.has_key?(:'cash')
        self.cash = attributes[:'cash']
      end

      if attributes.has_key?(:'cash_available_for_withdrawal')
        self.cash_available_for_withdrawal = attributes[:'cash_available_for_withdrawal']
      end

      if attributes.has_key?(:'cash_balances')
        self.cash_balances = attributes[:'cash_balances']
      end

      if attributes.has_key?(:'cash_held_for_orders')
        self.cash_held_for_orders = attributes[:'cash_held_for_orders']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'deactivated')
        self.deactivated = attributes[:'deactivated']
      end

      if attributes.has_key?(:'deposit_halted')
        self.deposit_halted = attributes[:'deposit_halted']
      end

      if attributes.has_key?(:'margin_balances')
        self.margin_balances = attributes[:'margin_balances']
      end

      if attributes.has_key?(:'max_ach_early_access_amount')
        self.max_ach_early_access_amount = attributes[:'max_ach_early_access_amount']
      end

      if attributes.has_key?(:'only_position_closing_trades')
        self.only_position_closing_trades = attributes[:'only_position_closing_trades']
      end

      if attributes.has_key?(:'portfolio')
        self.portfolio = attributes[:'portfolio']
      end

      if attributes.has_key?(:'positions')
        self.positions = attributes[:'positions']
      end

      if attributes.has_key?(:'sma')
        self.sma = attributes[:'sma']
      end

      if attributes.has_key?(:'sma_held_for_orders')
        self.sma_held_for_orders = attributes[:'sma_held_for_orders']
      end

      if attributes.has_key?(:'sweep_enabled')
        self.sweep_enabled = attributes[:'sweep_enabled']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'uncleared_deposits')
        self.uncleared_deposits = attributes[:'uncleared_deposits']
      end

      if attributes.has_key?(:'unsettled_funds')
        self.unsettled_funds = attributes[:'unsettled_funds']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'withdrawal_halted')
        self.withdrawal_halted = attributes[:'withdrawal_halted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number == o.account_number &&
          buying_power == o.buying_power &&
          cash == o.cash &&
          cash_available_for_withdrawal == o.cash_available_for_withdrawal &&
          cash_balances == o.cash_balances &&
          cash_held_for_orders == o.cash_held_for_orders &&
          created_at == o.created_at &&
          deactivated == o.deactivated &&
          deposit_halted == o.deposit_halted &&
          margin_balances == o.margin_balances &&
          max_ach_early_access_amount == o.max_ach_early_access_amount &&
          only_position_closing_trades == o.only_position_closing_trades &&
          portfolio == o.portfolio &&
          positions == o.positions &&
          sma == o.sma &&
          sma_held_for_orders == o.sma_held_for_orders &&
          sweep_enabled == o.sweep_enabled &&
          type == o.type &&
          uncleared_deposits == o.uncleared_deposits &&
          unsettled_funds == o.unsettled_funds &&
          updated_at == o.updated_at &&
          url == o.url &&
          user == o.user &&
          withdrawal_halted == o.withdrawal_halted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_number, buying_power, cash, cash_available_for_withdrawal, cash_balances, cash_held_for_orders, created_at, deactivated, deposit_halted, margin_balances, max_ach_early_access_amount, only_position_closing_trades, portfolio, positions, sma, sma_held_for_orders, sweep_enabled, type, uncleared_deposits, unsettled_funds, updated_at, url, user, withdrawal_halted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
