=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class BasicInfo
    attr_accessor :address

    attr_accessor :citizenship

    attr_accessor :city

    attr_accessor :country_of_residence

    attr_accessor :date_of_birth

    attr_accessor :marital_status

    attr_accessor :number_dependents

    attr_accessor :phone_number

    attr_accessor :state

    attr_accessor :tax_id_ssn

    attr_accessor :updated_at

    attr_accessor :user

    attr_accessor :zipcode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'citizenship' => :'citizenship',
        :'city' => :'city',
        :'country_of_residence' => :'country_of_residence',
        :'date_of_birth' => :'date_of_birth',
        :'marital_status' => :'marital_status',
        :'number_dependents' => :'number_dependents',
        :'phone_number' => :'phone_number',
        :'state' => :'state',
        :'tax_id_ssn' => :'tax_id_ssn',
        :'updated_at' => :'updated_at',
        :'user' => :'user',
        :'zipcode' => :'zipcode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'address' => :'String',
        :'citizenship' => :'String',
        :'city' => :'String',
        :'country_of_residence' => :'String',
        :'date_of_birth' => :'String',
        :'marital_status' => :'String',
        :'number_dependents' => :'Integer',
        :'phone_number' => :'String',
        :'state' => :'String',
        :'tax_id_ssn' => :'String',
        :'updated_at' => :'DateTime',
        :'user' => :'String',
        :'zipcode' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'citizenship')
        self.citizenship = attributes[:'citizenship']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'country_of_residence')
        self.country_of_residence = attributes[:'country_of_residence']
      end

      if attributes.has_key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.has_key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.has_key?(:'number_dependents')
        self.number_dependents = attributes[:'number_dependents']
      end

      if attributes.has_key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'tax_id_ssn')
        self.tax_id_ssn = attributes[:'tax_id_ssn']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          citizenship == o.citizenship &&
          city == o.city &&
          country_of_residence == o.country_of_residence &&
          date_of_birth == o.date_of_birth &&
          marital_status == o.marital_status &&
          number_dependents == o.number_dependents &&
          phone_number == o.phone_number &&
          state == o.state &&
          tax_id_ssn == o.tax_id_ssn &&
          updated_at == o.updated_at &&
          user == o.user &&
          zipcode == o.zipcode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [address, citizenship, city, country_of_residence, date_of_birth, marital_status, number_dependents, phone_number, state, tax_id_ssn, updated_at, user, zipcode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
