=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'uri'

module SwaggerClient
  class WatchlistsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # add
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbols symbols
    # @return [Array<WatchListsData>]
    def add_using_post(opts = {})
      data, _status_code, _headers = add_using_post_with_http_info(opts)
      data
    end

    # add
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbols symbols
    # @return [Array<(Array<WatchListsData>, Fixnum, Hash)>] Array<WatchListsData> data, response status code and response headers
    def add_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistsApi.add_using_post ...'
      end
      # resource path
      local_var_path = '/watchlists/Default/bulk_add/'

      # query parameters
      query_params = {}
      query_params[:'symbols'] = opts[:'symbols'] if !opts[:'symbols'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WatchListsData>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistsApi#add_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @return [WatchListCreateResponse]
    def create_using_post(opts = {})
      data, _status_code, _headers = create_using_post_with_http_info(opts)
      data
    end

    # create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name name
    # @return [Array<(WatchListCreateResponse, Fixnum, Hash)>] WatchListCreateResponse data, response status code and response headers
    def create_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistsApi.create_using_post ...'
      end
      # resource path
      local_var_path = '/watchlists/'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WatchListCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistsApi#create_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # delete
    # @param instrument_id instrumentId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfWatchListsData]
    def delete_using_delete(instrument_id, name, opts = {})
      data, _status_code, _headers = delete_using_delete_with_http_info(instrument_id, name, opts)
      data
    end

    # delete
    # @param instrument_id instrumentId
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfWatchListsData, Fixnum, Hash)>] MultipleOfWatchListsData data, response status code and response headers
    def delete_using_delete_with_http_info(instrument_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistsApi.delete_using_delete ...'
      end
      # verify the required parameter 'instrument_id' is set
      if @api_client.config.client_side_validation && instrument_id.nil?
        fail ArgumentError, "Missing the required parameter 'instrument_id' when calling WatchlistsApi.delete_using_delete"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling WatchlistsApi.delete_using_delete"
      end
      # resource path
      local_var_path = '/watchlists/{name}/{instrumentId}'.sub('{' + 'instrumentId' + '}', instrument_id.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfWatchListsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistsApi#delete_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getAll
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfWatchListCreateResponse]
    def get_all_using_get4(opts = {})
      data, _status_code, _headers = get_all_using_get4_with_http_info(opts)
      data
    end

    # getAll
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfWatchListCreateResponse, Fixnum, Hash)>] MultipleOfWatchListCreateResponse data, response status code and response headers
    def get_all_using_get4_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistsApi.get_all_using_get4 ...'
      end
      # resource path
      local_var_path = '/watchlists/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfWatchListCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistsApi#get_all_using_get4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfWatchListsData]
    def get_using_get1(name, opts = {})
      data, _status_code, _headers = get_using_get1_with_http_info(name, opts)
      data
    end

    # get
    # @param name name
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfWatchListsData, Fixnum, Hash)>] MultipleOfWatchListsData data, response status code and response headers
    def get_using_get1_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WatchlistsApi.get_using_get1 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling WatchlistsApi.get_using_get1"
      end
      # resource path
      local_var_path = '/watchlists/{name}/'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfWatchListsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WatchlistsApi#get_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
