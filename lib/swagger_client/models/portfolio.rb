=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class Portfolio
    attr_accessor :account

    attr_accessor :adjusted_equity_previous_close

    attr_accessor :equity

    attr_accessor :equity_previous_close

    attr_accessor :excess_maintenance

    attr_accessor :excess_maintenance_with_uncleared_deposits

    attr_accessor :excess_margin

    attr_accessor :excess_margin_with_uncleared_deposits

    attr_accessor :extended_hours_equity

    attr_accessor :extended_hours_market_value

    attr_accessor :last_core_equity

    attr_accessor :last_core_market_value

    attr_accessor :market_value

    attr_accessor :start_date

    attr_accessor :unwithdrawable_deposits

    attr_accessor :unwithdrawable_grants

    attr_accessor :url

    attr_accessor :withdrawable_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account' => :'account',
        :'adjusted_equity_previous_close' => :'adjusted_equity_previous_close',
        :'equity' => :'equity',
        :'equity_previous_close' => :'equity_previous_close',
        :'excess_maintenance' => :'excess_maintenance',
        :'excess_maintenance_with_uncleared_deposits' => :'excess_maintenance_with_uncleared_deposits',
        :'excess_margin' => :'excess_margin',
        :'excess_margin_with_uncleared_deposits' => :'excess_margin_with_uncleared_deposits',
        :'extended_hours_equity' => :'extended_hours_equity',
        :'extended_hours_market_value' => :'extended_hours_market_value',
        :'last_core_equity' => :'last_core_equity',
        :'last_core_market_value' => :'last_core_market_value',
        :'market_value' => :'market_value',
        :'start_date' => :'start_date',
        :'unwithdrawable_deposits' => :'unwithdrawable_deposits',
        :'unwithdrawable_grants' => :'unwithdrawable_grants',
        :'url' => :'url',
        :'withdrawable_amount' => :'withdrawable_amount'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account' => :'String',
        :'adjusted_equity_previous_close' => :'Float',
        :'equity' => :'Float',
        :'equity_previous_close' => :'Float',
        :'excess_maintenance' => :'Float',
        :'excess_maintenance_with_uncleared_deposits' => :'Float',
        :'excess_margin' => :'Float',
        :'excess_margin_with_uncleared_deposits' => :'Float',
        :'extended_hours_equity' => :'Float',
        :'extended_hours_market_value' => :'Float',
        :'last_core_equity' => :'Float',
        :'last_core_market_value' => :'Float',
        :'market_value' => :'Float',
        :'start_date' => :'String',
        :'unwithdrawable_deposits' => :'Float',
        :'unwithdrawable_grants' => :'Float',
        :'url' => :'String',
        :'withdrawable_amount' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.has_key?(:'adjusted_equity_previous_close')
        self.adjusted_equity_previous_close = attributes[:'adjusted_equity_previous_close']
      end

      if attributes.has_key?(:'equity')
        self.equity = attributes[:'equity']
      end

      if attributes.has_key?(:'equity_previous_close')
        self.equity_previous_close = attributes[:'equity_previous_close']
      end

      if attributes.has_key?(:'excess_maintenance')
        self.excess_maintenance = attributes[:'excess_maintenance']
      end

      if attributes.has_key?(:'excess_maintenance_with_uncleared_deposits')
        self.excess_maintenance_with_uncleared_deposits = attributes[:'excess_maintenance_with_uncleared_deposits']
      end

      if attributes.has_key?(:'excess_margin')
        self.excess_margin = attributes[:'excess_margin']
      end

      if attributes.has_key?(:'excess_margin_with_uncleared_deposits')
        self.excess_margin_with_uncleared_deposits = attributes[:'excess_margin_with_uncleared_deposits']
      end

      if attributes.has_key?(:'extended_hours_equity')
        self.extended_hours_equity = attributes[:'extended_hours_equity']
      end

      if attributes.has_key?(:'extended_hours_market_value')
        self.extended_hours_market_value = attributes[:'extended_hours_market_value']
      end

      if attributes.has_key?(:'last_core_equity')
        self.last_core_equity = attributes[:'last_core_equity']
      end

      if attributes.has_key?(:'last_core_market_value')
        self.last_core_market_value = attributes[:'last_core_market_value']
      end

      if attributes.has_key?(:'market_value')
        self.market_value = attributes[:'market_value']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'unwithdrawable_deposits')
        self.unwithdrawable_deposits = attributes[:'unwithdrawable_deposits']
      end

      if attributes.has_key?(:'unwithdrawable_grants')
        self.unwithdrawable_grants = attributes[:'unwithdrawable_grants']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'withdrawable_amount')
        self.withdrawable_amount = attributes[:'withdrawable_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account == o.account &&
          adjusted_equity_previous_close == o.adjusted_equity_previous_close &&
          equity == o.equity &&
          equity_previous_close == o.equity_previous_close &&
          excess_maintenance == o.excess_maintenance &&
          excess_maintenance_with_uncleared_deposits == o.excess_maintenance_with_uncleared_deposits &&
          excess_margin == o.excess_margin &&
          excess_margin_with_uncleared_deposits == o.excess_margin_with_uncleared_deposits &&
          extended_hours_equity == o.extended_hours_equity &&
          extended_hours_market_value == o.extended_hours_market_value &&
          last_core_equity == o.last_core_equity &&
          last_core_market_value == o.last_core_market_value &&
          market_value == o.market_value &&
          start_date == o.start_date &&
          unwithdrawable_deposits == o.unwithdrawable_deposits &&
          unwithdrawable_grants == o.unwithdrawable_grants &&
          url == o.url &&
          withdrawable_amount == o.withdrawable_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account, adjusted_equity_previous_close, equity, equity_previous_close, excess_maintenance, excess_maintenance_with_uncleared_deposits, excess_margin, excess_margin_with_uncleared_deposits, extended_hours_equity, extended_hours_market_value, last_core_equity, last_core_market_value, market_value, start_date, unwithdrawable_deposits, unwithdrawable_grants, url, withdrawable_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
