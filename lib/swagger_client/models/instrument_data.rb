=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class InstrumentData
    attr_accessor :bloomberg_unique

    attr_accessor :country

    attr_accessor :day_trade_ratio

    attr_accessor :fundamentals

    attr_accessor :id

    attr_accessor :list_date

    attr_accessor :maintenance_ratio

    attr_accessor :margin_initial_ratio

    attr_accessor :market

    attr_accessor :min_tick_size

    attr_accessor :name

    attr_accessor :quote

    attr_accessor :simple_name

    attr_accessor :splits

    attr_accessor :state

    attr_accessor :symbol

    attr_accessor :tradability

    attr_accessor :tradeable

    attr_accessor :type

    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bloomberg_unique' => :'bloomberg_unique',
        :'country' => :'country',
        :'day_trade_ratio' => :'day_trade_ratio',
        :'fundamentals' => :'fundamentals',
        :'id' => :'id',
        :'list_date' => :'list_date',
        :'maintenance_ratio' => :'maintenance_ratio',
        :'margin_initial_ratio' => :'margin_initial_ratio',
        :'market' => :'market',
        :'min_tick_size' => :'min_tick_size',
        :'name' => :'name',
        :'quote' => :'quote',
        :'simple_name' => :'simple_name',
        :'splits' => :'splits',
        :'state' => :'state',
        :'symbol' => :'symbol',
        :'tradability' => :'tradability',
        :'tradeable' => :'tradeable',
        :'type' => :'type',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'bloomberg_unique' => :'String',
        :'country' => :'String',
        :'day_trade_ratio' => :'Float',
        :'fundamentals' => :'String',
        :'id' => :'String',
        :'list_date' => :'String',
        :'maintenance_ratio' => :'Float',
        :'margin_initial_ratio' => :'Float',
        :'market' => :'String',
        :'min_tick_size' => :'Float',
        :'name' => :'String',
        :'quote' => :'String',
        :'simple_name' => :'String',
        :'splits' => :'String',
        :'state' => :'String',
        :'symbol' => :'String',
        :'tradability' => :'String',
        :'tradeable' => :'String',
        :'type' => :'String',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'bloomberg_unique')
        self.bloomberg_unique = attributes[:'bloomberg_unique']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'day_trade_ratio')
        self.day_trade_ratio = attributes[:'day_trade_ratio']
      end

      if attributes.has_key?(:'fundamentals')
        self.fundamentals = attributes[:'fundamentals']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'list_date')
        self.list_date = attributes[:'list_date']
      end

      if attributes.has_key?(:'maintenance_ratio')
        self.maintenance_ratio = attributes[:'maintenance_ratio']
      end

      if attributes.has_key?(:'margin_initial_ratio')
        self.margin_initial_ratio = attributes[:'margin_initial_ratio']
      end

      if attributes.has_key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.has_key?(:'min_tick_size')
        self.min_tick_size = attributes[:'min_tick_size']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'quote')
        self.quote = attributes[:'quote']
      end

      if attributes.has_key?(:'simple_name')
        self.simple_name = attributes[:'simple_name']
      end

      if attributes.has_key?(:'splits')
        self.splits = attributes[:'splits']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.has_key?(:'tradability')
        self.tradability = attributes[:'tradability']
      end

      if attributes.has_key?(:'tradeable')
        self.tradeable = attributes[:'tradeable']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bloomberg_unique == o.bloomberg_unique &&
          country == o.country &&
          day_trade_ratio == o.day_trade_ratio &&
          fundamentals == o.fundamentals &&
          id == o.id &&
          list_date == o.list_date &&
          maintenance_ratio == o.maintenance_ratio &&
          margin_initial_ratio == o.margin_initial_ratio &&
          market == o.market &&
          min_tick_size == o.min_tick_size &&
          name == o.name &&
          quote == o.quote &&
          simple_name == o.simple_name &&
          splits == o.splits &&
          state == o.state &&
          symbol == o.symbol &&
          tradability == o.tradability &&
          tradeable == o.tradeable &&
          type == o.type &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bloomberg_unique, country, day_trade_ratio, fundamentals, id, list_date, maintenance_ratio, margin_initial_ratio, market, min_tick_size, name, quote, simple_name, splits, state, symbol, tradability, tradeable, type, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
