=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'uri'

module SwaggerClient
  class QuoteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getQuote
    # @param symbol symbol
    # @param [Hash] opts the optional parameters
    # @return [QuoteData]
    def get_quote_using_get(symbol, opts = {})
      data, _status_code, _headers = get_quote_using_get_with_http_info(symbol, opts)
      data
    end

    # getQuote
    # @param symbol symbol
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuoteData, Fixnum, Hash)>] QuoteData data, response status code and response headers
    def get_quote_using_get_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuoteApi.get_quote_using_get ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling QuoteApi.get_quote_using_get"
      end
      # resource path
      local_var_path = '/quotes/{symbol}/'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QuoteData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuoteApi#get_quote_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getQuotes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbols symbols (default to TSLA,AMD)
    # @return [MultipleOfQuoteData]
    def get_quotes_using_get(opts = {})
      data, _status_code, _headers = get_quotes_using_get_with_http_info(opts)
      data
    end

    # getQuotes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbols symbols
    # @return [Array<(MultipleOfQuoteData, Fixnum, Hash)>] MultipleOfQuoteData data, response status code and response headers
    def get_quotes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuoteApi.get_quotes_using_get ...'
      end
      # resource path
      local_var_path = '/quotes/'

      # query parameters
      query_params = {}
      query_params[:'symbols'] = opts[:'symbols'] if !opts[:'symbols'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfQuoteData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuoteApi#get_quotes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
