=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'date'

module SwaggerClient
  class InvestmentProfile
    attr_accessor :annual_income

    attr_accessor :investment_experience

    attr_accessor :investment_objective

    attr_accessor :liquid_net_worth

    attr_accessor :liquidity_needs

    attr_accessor :risk_tolerance

    attr_accessor :source_of_funds

    attr_accessor :suitability_verified

    attr_accessor :tax_bracket

    attr_accessor :time_horizon

    attr_accessor :total_net_worth

    attr_accessor :updated_at

    attr_accessor :user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'annual_income' => :'annual_income',
        :'investment_experience' => :'investment_experience',
        :'investment_objective' => :'investment_objective',
        :'liquid_net_worth' => :'liquid_net_worth',
        :'liquidity_needs' => :'liquidity_needs',
        :'risk_tolerance' => :'risk_tolerance',
        :'source_of_funds' => :'source_of_funds',
        :'suitability_verified' => :'suitability_verified',
        :'tax_bracket' => :'tax_bracket',
        :'time_horizon' => :'time_horizon',
        :'total_net_worth' => :'total_net_worth',
        :'updated_at' => :'updated_at',
        :'user' => :'user'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'annual_income' => :'String',
        :'investment_experience' => :'String',
        :'investment_objective' => :'String',
        :'liquid_net_worth' => :'String',
        :'liquidity_needs' => :'String',
        :'risk_tolerance' => :'String',
        :'source_of_funds' => :'String',
        :'suitability_verified' => :'BOOLEAN',
        :'tax_bracket' => :'String',
        :'time_horizon' => :'String',
        :'total_net_worth' => :'String',
        :'updated_at' => :'DateTime',
        :'user' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'annual_income')
        self.annual_income = attributes[:'annual_income']
      end

      if attributes.has_key?(:'investment_experience')
        self.investment_experience = attributes[:'investment_experience']
      end

      if attributes.has_key?(:'investment_objective')
        self.investment_objective = attributes[:'investment_objective']
      end

      if attributes.has_key?(:'liquid_net_worth')
        self.liquid_net_worth = attributes[:'liquid_net_worth']
      end

      if attributes.has_key?(:'liquidity_needs')
        self.liquidity_needs = attributes[:'liquidity_needs']
      end

      if attributes.has_key?(:'risk_tolerance')
        self.risk_tolerance = attributes[:'risk_tolerance']
      end

      if attributes.has_key?(:'source_of_funds')
        self.source_of_funds = attributes[:'source_of_funds']
      end

      if attributes.has_key?(:'suitability_verified')
        self.suitability_verified = attributes[:'suitability_verified']
      end

      if attributes.has_key?(:'tax_bracket')
        self.tax_bracket = attributes[:'tax_bracket']
      end

      if attributes.has_key?(:'time_horizon')
        self.time_horizon = attributes[:'time_horizon']
      end

      if attributes.has_key?(:'total_net_worth')
        self.total_net_worth = attributes[:'total_net_worth']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          annual_income == o.annual_income &&
          investment_experience == o.investment_experience &&
          investment_objective == o.investment_objective &&
          liquid_net_worth == o.liquid_net_worth &&
          liquidity_needs == o.liquidity_needs &&
          risk_tolerance == o.risk_tolerance &&
          source_of_funds == o.source_of_funds &&
          suitability_verified == o.suitability_verified &&
          tax_bracket == o.tax_bracket &&
          time_horizon == o.time_horizon &&
          total_net_worth == o.total_net_worth &&
          updated_at == o.updated_at &&
          user == o.user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [annual_income, investment_experience, investment_objective, liquid_net_worth, liquidity_needs, risk_tolerance, source_of_funds, suitability_verified, tax_bracket, time_horizon, total_net_worth, updated_at, user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
