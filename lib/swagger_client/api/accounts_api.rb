=begin
#Api Documentation

#Api Documentation

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2

=end

require 'uri'

module SwaggerClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getAllPositions
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :nonzero nonzero
    # @return [MultipleOfPosition]
    def get_all_positions_using_get(account_id, opts = {})
      data, _status_code, _headers = get_all_positions_using_get_with_http_info(account_id, opts)
      data
    end

    # getAllPositions
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :nonzero nonzero
    # @return [Array<(MultipleOfPosition, Fixnum, Hash)>] MultipleOfPosition data, response status code and response headers
    def get_all_positions_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_all_positions_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_all_positions_using_get"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/positions/'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'nonzero'] = opts[:'nonzero'] if !opts[:'nonzero'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfPosition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_all_positions_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getAll
    # @param [Hash] opts the optional parameters
    # @return [MultipleOfAccountInfo]
    def get_all_using_get(opts = {})
      data, _status_code, _headers = get_all_using_get_with_http_info(opts)
      data
    end

    # getAll
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultipleOfAccountInfo, Fixnum, Hash)>] MultipleOfAccountInfo data, response status code and response headers
    def get_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_all_using_get ...'
      end
      # resource path
      local_var_path = '/accounts/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultipleOfAccountInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getPortFolio
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def get_port_folio_using_get(account_id, opts = {})
      data, _status_code, _headers = get_port_folio_using_get_with_http_info(account_id, opts)
      data
    end

    # getPortFolio
    # @param account_id accountId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Fixnum, Hash)>] Portfolio data, response status code and response headers
    def get_port_folio_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_port_folio_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_port_folio_using_get"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/portfolio/'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Portfolio')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_port_folio_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # getPosition
    # @param account_id accountId
    # @param position_id positionId
    # @param [Hash] opts the optional parameters
    # @return [Position]
    def get_position_using_get(account_id, position_id, opts = {})
      data, _status_code, _headers = get_position_using_get_with_http_info(account_id, position_id, opts)
      data
    end

    # getPosition
    # @param account_id accountId
    # @param position_id positionId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Position, Fixnum, Hash)>] Position data, response status code and response headers
    def get_position_using_get_with_http_info(account_id, position_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_position_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_position_using_get"
      end
      # verify the required parameter 'position_id' is set
      if @api_client.config.client_side_validation && position_id.nil?
        fail ArgumentError, "Missing the required parameter 'position_id' when calling AccountsApi.get_position_using_get"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/positions/{positionId}/'.sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'positionId' + '}', position_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Position')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_position_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
